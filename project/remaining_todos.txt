
Schema changes:
	Keypair:
		[x] add field bytea fingerprint_template
		[x] separate hashes for pin and rfid_uid
	Add table keypair_doors with fields
		[x] keypair_id
		[x] door_id
	Add table doors with fields
		[x] id
		[x] name
		[x] serial
	Logs:
		[x] add field Boolean fingerprint_used
[.] Test if Pis can communicate over local network wirelessly using a router with no internet connection
	They cannot. D:
[x] Fingerprint scanner and rfid polling at the same time (Spoonpi)

# Why we cannot match fingers in forkpi:
	Multiple SpoonPis might cause simultaneous uploading to the forkpi scanner
	Someone might use SpoonPi to verify while someone is enrolling in ForkPi

// Fingerprint stuff
Register fingerprint via forkpi (April Week 01)
Change the saving-to-db function (April Week 02)
Change the auth function (April Week 02)

// Doors
Add a module which is for door administration (April Week 02)

// Others
Mass-delete disabled keypairs
Change key used to encrypt keypairs to AES key transferred using RSA
Scan RFID close window while polling -> next poll causes crash

// 199 lol
Usability Test (April Week 03)

[x] write paper
	[x] Cost
	[x] Assembling the components
	[x] Testing the components
	[x] Introduction
	[x] Abstract
	[x] Results and discussion
[.] main.py and Swipe RFID polling at the same time causes crash - issue avoided since ForkPi and SpoonPi are never together on one machine
[x] delete old logs
[x] name editing must reflect with the RFID_UID and PIN
[x] lock out after entering wrong pin 5 times in a row
[x] save log
[x] Edit RFID UID
[x] Encode DB, passing of keypairs from views to templates
[x] flash messages lol
[x] salted passwords
[x] check valid pin and rfid uid
[x] check valid pin for editing
[x] PIN remove from pdf
[x] Deactivate/disable keypairs
[.] Option for 6 digit PIN - onchange disable all existing keypairs with 4-digit PIN
	[x] Or: Remove limits on max length; min length is 4

(Aren't these done?)
[x] Filter logs by date, allowed/denied, uid
[x] Change lock-out time / attempt limit
[x] Access ForkPi over the local network using its host name

[x] Beautification
	[x] Buttons must have a sort of margin around it.
	[x] Options: more presentable names
	[x] Color coding: red = denied
	[x] Date in Users
	[x] Visual cue for Admin in the Users
	[x] Notification if there are new users awaiting approval

[x] Signup Process
	[x] Check what sort of user and append the menu according to such.
	[x] Prevent access to certain views (users.py and options.py), if non-staff
	[.] Upon signup, is_superuser must be false (already done)
	[x] If user is inactive, do not allow login
	[%] if not superuser:
		Approve/Deny OR
		(
			if not staff
				[x] Promote to Admin
			else
				[x] Demote to Regular
			if active
				[x] Deactivate
			else
				[x] Activate
			[x] Delete
		)
	Raw text:
		Change sign-up process
		Admins can approve new users, edit db and view logs, in other words: (is_staff)
			- Users
			- Options
			- Logs
			- Keypairs
		Regular users can edit db and view logs, in other words: (is_superuser)
			- Logs
			- Keypairs